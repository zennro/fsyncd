#!/usr/bin/perl

# fsyncd/fsyncd
# Copyright (C) 2012 Shaun Landis
# This code is free to be modified and distributed however you please.
# There is no warranty, written nor implied.

# Watch a path via inotify|fsevents and rsync to a host on a timed (local->remote)
# and event-queue (local<-remote) driven basis.

# This is messy, and could be better. Enough said.

use Getopt::Long;
use File::Basename;
use IO::Select;
use if $^O eq "darwin", "Mac::FSEvents";
use if $^O eq "linux", "Linux::Inotify2";

my $flags;

if ($^O eq "darwin") {
    Mac::FSEvents->import;
    use constant FSE_NONE       => 0x00000000;
    use constant FSE_CREATED    => 0x00000100;
    use constant FSE_REMOVED    => 0x00000200;
    use constant FSE_RENAMED    => 0x00000800;
    use constant FSE_MODIFIED   => 0x00001000;
    use constant FSE_ISFILE     => 0x00010000;
    use constant FSE_ISDIR      => 0x00020000;
    use constant FSE_ISLINK     => 0x00040000;

    $flags = FSE_CREATED | FSE_REMOVED | FSE_RENAMED | FSE_MODIFIED | FSE_ISDIR | FSE_ISFILE;
}

my $dry = 0;
my $log = 0;
my $daemon = 1;
my $help = 0;
my %opts = ('log' => \$log, 'dry' => \$dry, 'daemon' => \$daemon, 'help' => \$help);
$opts{delay} = 0;
$opts{queue} = 1;

GetOptions(\%opts, 'source=s', 'target=s', 'delay=i', 'queue=i', 'log', 'dry', 'daemon!', 'help');

# Display usage and gtfo.
if ($help) {
    print "fsyncd - a filesystem event monitor and sync tool\n";
    print "fsyncd --source=<path> --target=<host:path> --queue=<size> --delay=<seconds> --log --dry --nodaemon --help\n";
    print "  --source   - defines the source path to monitor on the local machine\n";
    print "  --target   - defines the target path to sync on the remote machine\n";
    print "  --queue    - defines the number of events to queue before syncing [default=1]\n";
    print "  --delay    - enables polling the remote path for changes [default=0/off]\n";
    print "  --log      - enables logging; automatically disabled if running in daemon mode\n";
    print "  --nodaemon - enables console mode; useful for logging and debugging\n";
    print "  --dry      - enables dry mode; everything is configured and executed except the rsync commands\n";
    print "\n";
    exit(0);
}

# Some simple sanity checks
if (!exists($opts{source}) || !exists($opts{target})) {
    die("You must specify a source and a target!");
}

if ($daemon) {
    # We don't want to dump data if we're fork()ing
    $log = 0;
    my $pid = fork();

    if ($pid) {
        exit(0);
    } else {
        setpgrp;
    }
}

my ($source, $base) = fileparse($opts{source});
my ($host, $target) = split(/:/, $opts{target});

my $last = time;
my $remote = 0;
my $queue = 0;
my $rsync = 0;

# Does a remote->local sync
sub remote_sync {
    $last = time;
    $rsync = 1;
    $remote = 1;

    if ($log) {
        printf "[%s] <- rsync %s:%s %s\n", time, $host, $target, $base;
    }
  
    system("rsync -auz --delete-before --no-perms --exclude .index $host:$target $base") unless $dry;
    $rsync = 0;
}

# Does a local->remote sync
sub local_sync {
    $events = 0;
    $rsync = 1;
    
    if ($log) {
        printf "[%d] -> rsync %s/%s %s:\n", time, $base, $source, $host;
    }
  
    system("rsync -auz --delete-before --no-perms --exclude .index $base/$source $host:") unless $dry;
    $rsync = 0;
}

# Perform an initial remote->local sync to get the base
local_sync;
remote_sync;

my $pool;
my $fd;

if ($^O eq "darwin") {
    $pool = Mac::FSEvents->new({
        path    => $base.'/'.$source,
        flags   => FILE_EVENTS,
    });

    $fd = $pool->watch;
} elsif ($^O eq "linux") {
    $pool = new Linux::Inotify2;
    $pool->watch("$base/$source", IN_MODIFY|IN_MOVE|IN_CLOSEWRITE|IN_DELETE|IN_CREATE|IN_MOVE_SELF);
    $fd = $pool->fileno;
}

my $select = IO::Select->new($fd);

while () {
    # We just performed a local<-remote sync, so we have no need to catch the events here..
    if ($remote) {
        $remote = 0;
        next;
    }

    # We only want to execute the rsync after we've filled the queue.
    if ($select->can_read(1)) {
        if ($^O eq "darwin") {
            for my $event ($pool->read_events) {
                if ($event->flags & $flags) {
                    $queue++;
                }
            }
        } elsif ($^O eq "linux") {
            for my $event ($pool->read) {
                $queue++;
            }
        }
    }

    # Perform the rsync operation, but only if we're not currently running something already.
    if ($queue >= $opts{queue}) {
        if (!$rsync) {
            local_sync;
            $queue = 0;
        }
    }

    if ($opts{delay} && $last+$opts{delay} <= time) {
        # Do it.
        remote_sync;
        $last = time;
    }

    sleep(1);
}
